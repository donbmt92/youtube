"use client";

import Image from "next/image";
import { useState } from "react";
import ReactMarkdown from 'react-markdown'

export default function Home() {
  const [transcript, setTranscript] = useState("");
  const [outline, setOutline] = useState("");
  const [firstSections, setFirstSections] = useState("");
  const [lastSections, setLastSections] = useState("");
  const [loading, setLoading] = useState(false);
  const [step, setStep] = useState(0);
  const [useScriptTemplate, setUseScriptTemplate] = useState(false);

  const scriptTemplate = `T√¥i mu·ªën b·∫°n ƒë√≥ng vai tr√≤ l√† m·ªôt ng∆∞·ªùi vi·∫øt k·ªãch b·∫£n chuy√™n s√¢u v·ªÅ cu·ªôc ƒë·ªùi c√°c ngh·ªá sƒ©, tu√¢n th·ªß nghi√™m ng·∫∑t c√°c h∆∞·ªõng d·∫´n v·ªÅ phong c√°ch v√† quy tr√¨nh l√†m vi·ªác t√¥i cung c·∫•p: 

üé¨ H∆∞·ªõng D·∫´n Vi·∫øt K·ªãch B·∫£n Video YouTube

üñãÔ∏è Phong C√°ch Vi·∫øt:
Gi·ªçng ƒëi·ªáu: K·∫øt h·ª£p gi·ªØa ho√†i ni·ªám, chi·ªÅu s√¢u v√† m·ªôt ch√∫t gi·∫≠t g√¢n ƒë·ªÉ thu h√∫t kh√°n gi·∫£.
C√°ch k·ªÉ chuy·ªán: X√¢y d·ª±ng nh·ªØng c√¢u chuy·ªán c·∫£m x√∫c, ph√¢n t√≠ch s√¢u s·∫Øc v√† kh√°m ph√° c√°c kh√≠a c·∫°nh c√° nh√¢n trong cu·ªôc ƒë·ªùi c·ªßa c√°c di·ªÖn vi√™n.
C√¢n b·∫±ng n·ªôi dung: Tr√¨nh b√†y m·ªôt c√°ch c√¢n b·∫±ng gi·ªØa th√†nh t·ª±u v√† tranh c√£i, cung c·∫•p g√≥c nh√¨n to√†n di·ªán.
Ng√¥n ng·ªØ: S·ª≠ d·ª•ng ng√¥n ng·ªØ bi·ªÉu c·∫£m v√† h·∫•p d·∫´n, ph√π h·ª£p cho vi·ªác thuy·∫øt minh, ƒë·∫£m b·∫£o truy·ªÅn t·∫£i m∆∞·ª£t m√† v√† ƒë·∫ßy c·∫£m x√∫c.

üé§ H∆∞·ªõng D·∫´n Tr√¨nh B√†y:
Thuy·∫øt minh: ƒê·∫£m b·∫£o k·ªãch b·∫£n ƒë∆∞·ª£c vi·∫øt ƒë·ªÉ ng∆∞·ªùi thuy·∫øt minh c√≥ th·ªÉ truy·ªÅn t·∫£i m·ªôt c√°ch l∆∞u lo√°t v√† ƒë·∫ßy c·∫£m x√∫c.
H√¨nh ·∫£nh: Kh√¥ng c·∫ßn ƒë·ªÅ xu·∫•t h√¨nh ·∫£nh; t·∫≠p trung ho√†n to√†n v√†o vi·ªác x√¢y d·ª±ng c√¢u chuy·ªán h·∫•p d·∫´n.

üîÑ Quy Tr√¨nh L√†m Vi·ªác:
Sau khi ho√†n th√†nh m·ªói ph·∫ßn, t·∫°m d·ª´ng ƒë·ªÉ x√°c nh·∫≠n xem c√≥ n√™n ti·∫øp t·ª•c ph·∫ßn ti·∫øp theo kh√¥ng.
Duy tr√¨nh c√°ch k·ªÉ chuy·ªán h·∫•p d·∫´n, tr√°nh t√≥m t·∫Øt kh√¥ khan.
Tr√°nh l·∫∑p l·∫°i th√¥ng tin gi·ªØa c√°c ph·∫ßn ƒë·ªÉ gi·ªØ cho n·ªôi dung lu√¥n m·ªõi m·∫ª v√† h·∫•p d·∫´n.
Tr√°nh s·ª≠ d·ª•ng k√Ω hi·ªáu ho·∫∑c ƒë·ªãnh d·∫°ng c√≥ th·ªÉ l√†m gi√°n ƒëo·∫°n d√≤ng ch·∫£y c·ªßa thuy·∫øt minh.

‚ö†Ô∏è Ghi Ch√∫ Quan Tr·ªçng:
Nh·∫Øm ƒë·∫øn vi·ªác kh√°m ph√° v√† ƒë∆∞a v√†o nh·ªØng s·ª± th·∫≠t √≠t ng∆∞·ªùi bi·∫øt, tin ƒë·ªìn ho·∫∑c giai tho·∫°i h·∫•p d·∫´n ƒë·ªÉ tƒÉng s·ª©c h√∫t cho c√¢u chuy·ªán.
ƒê·∫£m b·∫£o t·∫•t c·∫£ th√¥ng tin ƒë∆∞·ª£c tr√¨nh b√†y trong m·ªôt c√¢u chuy·ªán li·ªÅn m·∫°ch, kh√¥ng s·ª≠ d·ª•ng d·∫•u ƒë·∫ßu d√≤ng ho·∫∑c chuy·ªÉn ƒëo·∫°n ƒë·ªôt ng·ªôt.`;

  const processTranscript = async () => {
    if (!transcript.trim()) {
      alert("Vui l√≤ng nh·∫≠p transcript");
      return;
    }

    setLoading(true);
    setStep(1);
    
    try {
      // Step 1: Get outline
      const outlinePrompt = useScriptTemplate 
        ? `${scriptTemplate}\n\n${transcript}\n\nD·ª±a v√†o transcript n√†y, h√£y t·∫°o m·ªôt ƒë·ªÅ c∆∞∆°ng chi ti·∫øt v·ªõi 8 ph·∫ßn cho m·ªôt b√†i vi·∫øt k·ªãch b·∫£n d√†i kho·∫£ng 6000 t·ª´. Cho bi·∫øt m·ªói ph·∫ßn n√™n d√†i bao nhi√™u t·ª´.`
        : `${transcript}\n\nD·ª±a v√†o transcript n√†y, h√£y t·∫°o m·ªôt ƒë·ªÅ c∆∞∆°ng chi ti·∫øt v·ªõi 8 ph·∫ßn.`;
      
      const outlineResponse = await fetch("/api/gemini", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          prompt: outlinePrompt
        }),
      });
      
      const outlineData = await outlineResponse.json();
      setOutline(outlineData.response);
      setStep(2);
      
      // Step 2: Get first 4 sections
      const firstSectionsPrompt = useScriptTemplate
        ? `${scriptTemplate}\n\n${transcript}\n\nD·ª±a v√†o transcript n√†y v√† ƒë·ªÅ c∆∞∆°ng sau:\n${outlineData.response}\n\nVi·∫øt n·ªôi dung chi ti·∫øt cho 4 ph·∫ßn ƒë·∫ßu ti√™n c·ªßa ƒë·ªÅ c∆∞∆°ng. ƒê·∫£m b·∫£o kh√¥ng c√≥ k√Ω t·ª± ƒë·∫∑c bi·ªát nh∆∞ *, #, -, /n, ... trong n·ªôi dung. Vi·∫øt li·ªÅn m·∫°ch, kh√¥ng ƒë√°nh s·ªë, kh√¥ng ƒë√°nh d·∫•u ƒë·∫ßu d√≤ng.`
        : `${transcript}\n\nD·ª±a v√†o transcript n√†y v√† ƒë·ªÅ c∆∞∆°ng sau:\n${outlineData.response}\n\nVi·∫øt n·ªôi dung chi ti·∫øt cho 4 ph·∫ßn ƒë·∫ßu ti√™n c·ªßa ƒë·ªÅ c∆∞∆°ng.`;
      
      const firstSectionsResponse = await fetch("/api/gemini", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          prompt: firstSectionsPrompt
        }),
      });
      
      const firstSectionsData = await firstSectionsResponse.json();
      setFirstSections(firstSectionsData.response);
      setStep(3);
      
      // Step 3: Get last 4 sections
      const lastSectionsPrompt = useScriptTemplate
        ? `${scriptTemplate}\n\n${transcript}\n\nD·ª±a v√†o transcript n√†y v√† ƒë·ªÅ c∆∞∆°ng sau:\n${outlineData.response}\n\nVi·∫øt n·ªôi dung chi ti·∫øt cho 4 ph·∫ßn cu·ªëi c√πng c·ªßa ƒë·ªÅ c∆∞∆°ng. ƒê·∫£m b·∫£o kh√¥ng c√≥ k√Ω t·ª± ƒë·∫∑c bi·ªát nh∆∞ *, #, -, /n, ... trong n·ªôi dung. Vi·∫øt li·ªÅn m·∫°ch, kh√¥ng ƒë√°nh s·ªë, kh√¥ng ƒë√°nh d·∫•u ƒë·∫ßu d√≤ng.`
        : `${transcript}\n\nD·ª±a v√†o transcript n√†y v√† ƒë·ªÅ c∆∞∆°ng sau:\n${outlineData.response}\n\nVi·∫øt n·ªôi dung chi ti·∫øt cho 4 ph·∫ßn cu·ªëi c√πng c·ªßa ƒë·ªÅ c∆∞∆°ng.`;
      
      const lastSectionsResponse = await fetch("/api/gemini", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          prompt: lastSectionsPrompt
        }),
      });
      
      const lastSectionsData = await lastSectionsResponse.json();
      setLastSections(lastSectionsData.response);
      setStep(4);
    } catch (error) {
      console.error("L·ªói x·ª≠ l√Ω transcript:", error);
      alert("L·ªói x·ª≠ l√Ω transcript. Vui l√≤ng th·ª≠ l·∫°i.");
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="min-h-screen p-8 pb-20 gap-16 sm:p-20 font-[family-name:var(--font-geist-sans)]">
      <main className="max-w-4xl mx-auto">
        <div className="text-center mb-8">
          <Image
            className="dark:invert mx-auto mb-4"
            src="/next.svg"
            alt="Next.js logo"
            width={180}
            height={38}
            priority
          />
          <h1 className="text-3xl font-bold mb-2">X·ª≠ L√Ω Transcript YouTube</h1>
          <p className="text-gray-600 dark:text-gray-400">
            ƒê∆∞·ª£c h·ªó tr·ª£ b·ªüi Google Gemini API v√† Next.js
          </p>
        </div>

        <div className="bg-white dark:bg-gray-800 rounded-lg shadow-lg p-6 mb-8">
          <div className="space-y-4">
            <div>
              <label htmlFor="transcript" className="block text-sm font-medium mb-2">
                Nh·∫≠p Transcript YouTube:
              </label>
              <textarea
                id="transcript"
                value={transcript}
                onChange={(e) => setTranscript(e.target.value)}
                placeholder="D√°n transcript YouTube c·ªßa b·∫°n v√†o ƒë√¢y..."
                rows={6}
                className="w-full p-3 border border-gray-300 dark:border-gray-600 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent dark:bg-gray-700 dark:text-white resize-none"
                disabled={loading}
              />
            </div>
            
            <div className="flex items-center">
              <input
                type="checkbox"
                id="useTemplate"
                checked={useScriptTemplate}
                onChange={(e) => setUseScriptTemplate(e.target.checked)}
                className="h-4 w-4 text-blue-600 rounded border-gray-300 focus:ring-blue-500"
                disabled={loading}
              />
              <label htmlFor="useTemplate" className="ml-2 block text-sm text-gray-700 dark:text-gray-300">
                S·ª≠ d·ª•ng m·∫´u k·ªãch b·∫£n ngh·ªá sƒ©
              </label>
            </div>
            
            <button
              onClick={processTranscript}
              disabled={loading || !transcript.trim()}
              className="w-full bg-blue-600 hover:bg-blue-700 disabled:bg-gray-400 text-white font-medium py-3 px-4 rounded-md transition-colors flex items-center justify-center gap-2"
            >
              {loading ? (
                <>
                  <div className="animate-spin rounded-full h-4 w-4 border-2 border-white border-t-transparent"></div>
                  ƒêang x·ª≠ l√Ω transcript...
                </>
              ) : (
                "X·ª≠ L√Ω Transcript"
              )}
            </button>
          </div>
        </div>

        {step > 0 && (
          <div className="space-y-6">
            <div className="bg-gray-50 dark:bg-gray-900 rounded-lg p-6">
              <h2 className="text-lg font-semibold mb-3">B∆∞·ªõc 1: ƒê·ªÅ C∆∞∆°ng</h2>
              <div className="prose dark:prose-invert max-w-none">
                {step === 1 && loading ? (
                  <div className="flex items-center gap-2 text-gray-500">
                    <div className="animate-spin rounded-full h-4 w-4 border-2 border-gray-500 border-t-transparent"></div>
                    ƒêang t·∫°o ƒë·ªÅ c∆∞∆°ng...
                  </div>
                ) : (
                  <pre className="whitespace-pre-wrap text-sm leading-relaxed">
                  <ReactMarkdown>{outline}</ReactMarkdown>
                  </pre>
                )}
              </div>
            </div>

            {step > 1 && (
              <div className="bg-gray-50 dark:bg-gray-900 rounded-lg p-6">
                <h2 className="text-lg font-semibold mb-3">B∆∞·ªõc 2: 4 Ph·∫ßn ƒê·∫ßu Ti√™n</h2>
                <div className="prose dark:prose-invert max-w-none">
                  {step === 2 && loading ? (
                    <div className="flex items-center gap-2 text-gray-500">
                      <div className="animate-spin rounded-full h-4 w-4 border-2 border-gray-500 border-t-transparent"></div>
                      ƒêang t·∫°o n·ªôi dung 4 ph·∫ßn ƒë·∫ßu...
                    </div>
                  ) : (
                    <pre className="whitespace-pre-wrap text-sm leading-relaxed">
                      <ReactMarkdown>{firstSections}</ReactMarkdown>
                    </pre>
                  )}
                </div>
              </div>
            )}

            {step > 2 && (
              <div className="bg-gray-50 dark:bg-gray-900 rounded-lg p-6">
                <h2 className="text-lg font-semibold mb-3">B∆∞·ªõc 3: 4 Ph·∫ßn Cu·ªëi C√πng</h2>
                <div className="prose dark:prose-invert max-w-none">
                  {step === 3 && loading ? (
                    <div className="flex items-center gap-2 text-gray-500">
                      <div className="animate-spin rounded-full h-4 w-4 border-2 border-gray-500 border-t-transparent"></div>
                      ƒêang t·∫°o n·ªôi dung 4 ph·∫ßn cu·ªëi...
                    </div>
                  ) : (
                    <pre className="whitespace-pre-wrap text-sm leading-relaxed">
                      <ReactMarkdown>{lastSections}</ReactMarkdown>
                    </pre>
                  )}
                </div>
              </div>
            )}
          </div>
        )}
      </main>

      <footer className="mt-16 border-t pt-8 text-center text-sm text-gray-600 dark:text-gray-400">
        <div className="flex gap-6 justify-center flex-wrap">
          <a
            className="flex items-center gap-2 hover:underline hover:underline-offset-4"
            href="https://nextjs.org/docs"
            target="_blank"
            rel="noopener noreferrer"
          >
            <Image
              aria-hidden
              src="/file.svg"
              alt="File icon"
              width={16}
              height={16}
            />
            T√†i li·ªáu Next.js
          </a>
          <a
            className="flex items-center gap-2 hover:underline hover:underline-offset-4"
            href="https://ai.google.dev"
            target="_blank"
            rel="noopener noreferrer"
          >
            <Image
              aria-hidden
              src="/globe.svg"
              alt="Globe icon"
              width={16}
              height={16}
            />
            Gemini API
          </a>
        </div>
      </footer>
    </div>
  );
}